{"version":3,"sources":["webpack:///node_modules/spotify-web-api-js/src/spotify-web-api.js","webpack:///src/app/core/services/spotify-auth.service.ts"],"names":["SpotifyWebApi","_baseUri","_accessToken","_promiseImplementation","WrapPromiseWithAbort","promise","onAbort","abort","_promiseProvider","promiseFunction","returnedPromise","deferred","defer","resolvedResult","resolve","rejectedResult","reject","window","Promise","_extend","args","Array","prototype","slice","call","arguments","target","objects","forEach","object","j","hasOwnProperty","_buildUrl","url","parameters","qs","key","value","encodeURIComponent","length","substring","_performRequest","requestData","callback","req","XMLHttpRequest","success","data","failure","type","open","params","setRequestHeader","onreadystatechange","readyState","responseText","JSON","parse","e","console","error","status","send","postData","contentType","stringify","_checkParamsAndPerformRequest","options","optionsAlwaysExtendParams","opt","cb","Constr","constructor","getGeneric","getMe","getMySavedTracks","addToMySavedTracks","trackIds","removeFromMySavedTracks","containsMySavedTracks","ids","join","getMySavedAlbums","addToMySavedAlbums","albumIds","removeFromMySavedAlbums","containsMySavedAlbums","getMyTopArtists","getMyTopTracks","getMyRecentlyPlayedTracks","followUsers","userIds","followArtists","artistIds","followPlaylist","playlistId","unfollowUsers","unfollowArtists","unfollowPlaylist","isFollowingUsers","isFollowingArtists","areFollowingPlaylist","getFollowedArtists","getUser","userId","getUserPlaylists","getPlaylist","getPlaylistTracks","getPlaylistCoverImage","createPlaylist","changePlaylistDetails","addTracksToPlaylist","uris","replaceTracksInPlaylist","reorderTracksInPlaylist","rangeStart","insertBefore","range_start","insert_before","removeTracksFromPlaylist","dataToBeSent","map","uri","tracks","removeTracksFromPlaylistWithSnapshotId","snapshotId","snapshot_id","removeTracksFromPlaylistInPositions","positions","uploadCustomPlaylistCoverImage","imageData","replace","getAlbum","albumId","getAlbumTracks","getAlbums","getTrack","trackId","getTracks","getArtist","artistId","getArtists","getArtistAlbums","getArtistTopTracks","countryId","country","getArtistRelatedArtists","getFeaturedPlaylists","getNewReleases","getCategories","getCategory","categoryId","getCategoryPlaylists","search","query","types","q","searchAlbums","searchArtists","searchTracks","searchPlaylists","searchShows","searchEpisodes","getAudioFeaturesForTrack","getAudioFeaturesForTracks","getAudioAnalysisForTrack","getRecommendations","getAvailableGenreSeeds","getMyDevices","getMyCurrentPlaybackState","getMyCurrentPlayingTrack","transferMyPlayback","deviceIds","device_ids","play","device_id","field","newOptions","queue","pause","skipToNext","skipToPrevious","seek","position_ms","setRepeat","state","setVolume","volume_percent","setShuffle","getShow","showId","getShows","showIds","getMySavedShows","addToMySavedShows","removeFromMySavedShows","containsMySavedShows","getShowEpisodes","getEpisode","episodeId","getEpisodes","episodeIds","getAccessToken","setAccessToken","accessToken","setPromiseImplementation","PromiseImplementation","valid","p","then","Error","module","exports","SpotifyAuthService","commonService","navCtrl","result","spotifyApi","GlobalEnvironment","config","clientId","environment","redirectUrl","scopes","tokenExchangeUrl","tokenRefreshUrl","cordova","plugins","spotifyAuth","forget","authorize","auth","log","loggedIn","setAuth","navigateForward","err","playlists","id","CommonService","NavController","Injectable","providedIn"],"mappings":"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","file":"default-src_app_core_services_spotify-auth_service_ts-es5.js","sourcesContent":["/* global module */\n'use strict';\n\n/**\n * Class representing the API\n */\nvar SpotifyWebApi = (function () {\n  var _baseUri = 'https://api.spotify.com/v1';\n  var _accessToken = null;\n  var _promiseImplementation = null;\n\n  var WrapPromiseWithAbort = function (promise, onAbort) {\n    promise.abort = onAbort;\n    return promise;\n  };\n\n  var _promiseProvider = function (promiseFunction, onAbort) {\n    var returnedPromise;\n    if (_promiseImplementation !== null) {\n      var deferred = _promiseImplementation.defer();\n      promiseFunction(\n        function (resolvedResult) {\n          deferred.resolve(resolvedResult);\n        },\n        function (rejectedResult) {\n          deferred.reject(rejectedResult);\n        }\n      );\n      returnedPromise = deferred.promise;\n    } else {\n      if (window.Promise) {\n        returnedPromise = new window.Promise(promiseFunction);\n      }\n    }\n\n    if (returnedPromise) {\n      return new WrapPromiseWithAbort(returnedPromise, onAbort);\n    } else {\n      return null;\n    }\n  };\n\n  var _extend = function () {\n    var args = Array.prototype.slice.call(arguments);\n    var target = args[0];\n    var objects = args.slice(1);\n    target = target || {};\n    objects.forEach(function (object) {\n      for (var j in object) {\n        if (object.hasOwnProperty(j)) {\n          target[j] = object[j];\n        }\n      }\n    });\n    return target;\n  };\n\n  var _buildUrl = function (url, parameters) {\n    var qs = '';\n    for (var key in parameters) {\n      if (parameters.hasOwnProperty(key)) {\n        var value = parameters[key];\n        qs += encodeURIComponent(key) + '=' + encodeURIComponent(value) + '&';\n      }\n    }\n    if (qs.length > 0) {\n      // chop off last '&'\n      qs = qs.substring(0, qs.length - 1);\n      url = url + '?' + qs;\n    }\n    return url;\n  };\n\n  var _performRequest = function (requestData, callback) {\n    var req = new XMLHttpRequest();\n\n    var promiseFunction = function (resolve, reject) {\n      function success(data) {\n        if (resolve) {\n          resolve(data);\n        }\n        if (callback) {\n          callback(null, data);\n        }\n      }\n\n      function failure() {\n        if (reject) {\n          reject(req);\n        }\n        if (callback) {\n          callback(req, null);\n        }\n      }\n\n      var type = requestData.type || 'GET';\n      req.open(type, _buildUrl(requestData.url, requestData.params));\n      if (_accessToken) {\n        req.setRequestHeader('Authorization', 'Bearer ' + _accessToken);\n      }\n\n      req.onreadystatechange = function () {\n        if (req.readyState === 4) {\n          var data = null;\n          try {\n            data = req.responseText ? JSON.parse(req.responseText) : '';\n          } catch (e) {\n            console.error(e);\n          }\n\n          if (req.status >= 200 && req.status < 300) {\n            success(data);\n          } else {\n            failure();\n          }\n        }\n      };\n\n      if (type === 'GET') {\n        req.send(null);\n      } else {\n        var postData = null;\n        if (requestData.postData) {\n          if (requestData.contentType === 'image/jpeg') {\n            postData = requestData.postData;\n            req.setRequestHeader('Content-Type', requestData.contentType);\n          } else {\n            postData = JSON.stringify(requestData.postData);\n            req.setRequestHeader('Content-Type', 'application/json');\n          }\n        }\n        req.send(postData);\n      }\n    };\n\n    if (callback) {\n      promiseFunction();\n      return null;\n    } else {\n      return _promiseProvider(promiseFunction, function () {\n        req.abort();\n      });\n    }\n  };\n\n  var _checkParamsAndPerformRequest = function (\n    requestData,\n    options,\n    callback,\n    optionsAlwaysExtendParams\n  ) {\n    var opt = {};\n    var cb = null;\n\n    if (typeof options === 'object') {\n      opt = options;\n      cb = callback;\n    } else if (typeof options === 'function') {\n      cb = options;\n    }\n\n    // options extend postData, if any. Otherwise they extend parameters sent in the url\n    var type = requestData.type || 'GET';\n    if (type !== 'GET' && requestData.postData && !optionsAlwaysExtendParams) {\n      requestData.postData = _extend(requestData.postData, opt);\n    } else {\n      requestData.params = _extend(requestData.params, opt);\n    }\n    return _performRequest(requestData, cb);\n  };\n\n  /**\n   * Creates an instance of the wrapper\n   * @constructor\n   */\n  var Constr = function () {};\n\n  Constr.prototype = {\n    constructor: SpotifyWebApi\n  };\n\n  /**\n   * Fetches a resource through a generic GET request.\n   *\n   * @param {string} url The URL to be fetched\n   * @param {function(Object,Object)} callback An optional callback\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getGeneric = function (url, callback) {\n    var requestData = {\n      url: url\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Fetches information about the current user.\n   * See [Get Current User's Profile](https://developer.spotify.com/web-api/get-current-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMe = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches current user's saved tracks.\n   * See [Get Current User's Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedTracks = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds a list of tracks to the current user's saved tracks.\n   * See [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedTracks = function (trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'PUT',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove a list of tracks from the current user's saved tracks.\n   * See [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedTracks = function (\n    trackIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'DELETE',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Checks if the current user's saved tracks contains a certain list of tracks.\n   * See [Check Current User's Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedTracks = function (\n    trackIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/me/tracks/contains',\n      params: { ids: trackIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of the albums saved in the current Spotify user's \"Your Music\" library.\n   * See [Get Current User's Saved Albums](https://developer.spotify.com/web-api/get-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedAlbums = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Save one or more albums to the current user's \"Your Music\" library.\n   * See [Save Albums for Current User](https://developer.spotify.com/web-api/save-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedAlbums = function (albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'PUT',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove one or more albums from the current user's \"Your Music\" library.\n   * See [Remove Albums for Current User](https://developer.spotify.com/web-api/remove-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedAlbums = function (\n    albumIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'DELETE',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Check if one or more albums is already saved in the current Spotify user's \"Your Music\" library.\n   * See [Check User's Saved Albums](https://developer.spotify.com/web-api/check-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedAlbums = function (\n    albumIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/me/albums/contains',\n      params: { ids: albumIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the current user’s top artists based on calculated affinity.\n   * See [Get a User’s Top Artists](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyTopArtists = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the current user’s top tracks based on calculated affinity.\n   * See [Get a User’s Top Tracks](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyTopTracks = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get tracks from the current user’s recently played tracks.\n   * See [Get Current User’s Recently Played Tracks](https://developer.spotify.com/web-api/web-api-personalization-endpoints/get-recently-played/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyRecentlyPlayedTracks = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/recently-played'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds the current user as a follower of one or more other Spotify users.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followUsers = function (userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Adds the current user as a follower of one or more artists.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followArtists = function (artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Add the current user as a follower of one playlist.\n   * See [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed. For instance,\n   * whether you want the playlist to be followed privately ({public: false})\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followPlaylist = function (playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers',\n      type: 'PUT',\n      postData: {}\n    };\n\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Removes the current user as a follower of one or more other Spotify users.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowUsers = function (userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Removes the current user as a follower of one or more artists.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowArtists = function (artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Remove the current user as a follower of one playlist.\n   * See [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowPlaylist = function (playlistId, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers',\n      type: 'DELETE'\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Checks to see if the current user is following one or more other Spotify users.\n   * See [Check if Current User Follows Users or Artists](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the users sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.isFollowingUsers = function (userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Checks to see if the current user is following one or more artists.\n   * See [Check if Current User Follows](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the artists sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.isFollowingArtists = function (artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Check to see if one or more Spotify users are following a specified playlist.\n   * See [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the users are following the playlist sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.areFollowingPlaylist = function (\n    playlistId,\n    userIds,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Get the current user's followed artists.\n   * See [Get User's Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} [options] Options, being after and limit.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an object with a paged object containing\n   * artists.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * artists objects. Not returned if a callback is given.\n   */\n  Constr.prototype.getFollowedArtists = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following',\n      type: 'GET',\n      params: {\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches information about a specific user.\n   * See [Get a User's Profile](https://developer.spotify.com/web-api/get-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getUser = function (userId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId)\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of the current user's playlists.\n   * See [Get a List of a User's Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId An optional id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>). If not provided, the id of the user that granted\n   * the permissions will be used.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getUserPlaylists = function (userId, options, callback) {\n    var requestData;\n    if (typeof userId === 'string') {\n      requestData = {\n        url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists'\n      };\n    } else {\n      requestData = {\n        url: _baseUri + '/me/playlists'\n      };\n      callback = options;\n      options = userId;\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a specific playlist.\n   * See [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylist = function (playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the tracks from a specific playlist.\n   * See [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylistTracks = function (\n    playlistId,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Gets the current image associated with a specific playlist.\n   * See [Get a Playlist Cover Image](https://developer.spotify.com/documentation/web-api/reference/playlists/get-playlist-cover/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:playlist:<here_is_the_playlist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylistCoverImage = function (playlistId, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/images'\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Creates a playlist and stores it in the current user's library.\n   * See [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.createPlaylist = function (userId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists',\n      type: 'POST',\n      postData: options\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Change a playlist's name and public/private state\n   * See [Change a Playlist's Details](https://developer.spotify.com/web-api/change-playlist-details/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} data A JSON object with the data to update. E.g. {name: 'A new name', public: true}\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.changePlaylistDetails = function (\n    playlistId,\n    data,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId,\n      type: 'PUT',\n      postData: data\n    };\n    return _checkParamsAndPerformRequest(requestData, data, callback);\n  };\n\n  /**\n   * Add tracks to a playlist.\n   * See [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addTracksToPlaylist = function (\n    playlistId,\n    uris,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'POST',\n      postData: {\n        uris: uris\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback, true);\n  };\n\n  /**\n   * Replace the tracks of a playlist\n   * See [Replace a Playlist's Tracks](https://developer.spotify.com/web-api/replace-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.replaceTracksInPlaylist = function (\n    playlistId,\n    uris,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: { uris: uris }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Reorder tracks in a playlist\n   * See [Reorder a Playlist’s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {number} rangeStart The position of the first track to be reordered.\n   * @param {number} insertBefore The position where the tracks should be inserted. To reorder the tracks to\n   * the end of the playlist, simply set insert_before to the position after the last track.\n   * @param {Object} options An object with optional parameters (range_length, snapshot_id)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.reorderTracksInPlaylist = function (\n    playlistId,\n    rangeStart,\n    insertBefore,\n    options,\n    callback\n  ) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: {\n        range_start: rangeStart,\n        insert_before: insertBefore\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylist = function (\n    playlistId,\n    uris,\n    callback\n  ) {\n    var dataToBeSent = uris.map(function (uri) {\n      if (typeof uri === 'string') {\n        return { uri: uri };\n      } else {\n        return uri;\n      }\n    });\n\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: { tracks: dataToBeSent }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist, specifying a snapshot id.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylistWithSnapshotId = function (\n    playlistId,\n    uris,\n    snapshotId,\n    callback\n  ) {\n    var dataToBeSent = uris.map(function (uri) {\n      if (typeof uri === 'string') {\n        return { uri: uri };\n      } else {\n        return uri;\n      }\n    });\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        tracks: dataToBeSent,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist, specifying the positions of the tracks to be removed.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<number>} positions array of integers containing the positions of the tracks to remove\n   * from the playlist.\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylistInPositions = function (\n    playlistId,\n    positions,\n    snapshotId,\n    callback\n  ) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        positions: positions,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Upload a custom playlist cover image.\n   * See [Upload A Custom Playlist Cover Image](https://developer.spotify.com/web-api/upload-a-custom-playlist-cover-image/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {string} imageData Base64 encoded JPEG image data, maximum payload size is 256 KB.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.uploadCustomPlaylistCoverImage = function (\n    playlistId,\n    imageData,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/images',\n      type: 'PUT',\n      postData: imageData.replace(/^data:image\\/jpeg;base64,/, ''),\n      contentType: 'image/jpeg'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Fetches an album from the Spotify catalog.\n   * See [Get an Album](https://developer.spotify.com/web-api/get-album/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbum = function (albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the tracks of an album from the Spotify catalog.\n   * See [Get an Album's Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbumTracks = function (albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple albums from the Spotify catalog.\n   * See [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbums = function (albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/',\n      params: { ids: albumIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a track from the Spotify catalog.\n   * See [Get a Track](https://developer.spotify.com/web-api/get-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getTrack = function (trackId, options, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/tracks/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple tracks from the Spotify catalog.\n   * See [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getTracks = function (trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/tracks/',\n      params: { ids: trackIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches an artist from the Spotify catalog.\n   * See [Get an Artist](https://developer.spotify.com/web-api/get-artist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtist = function (artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple artists from the Spotify catalog.\n   * See [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtists = function (artistIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/',\n      params: { ids: artistIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the albums of an artist from the Spotify catalog.\n   * See [Get an Artist's Albums](https://developer.spotify.com/web-api/get-artists-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistAlbums = function (artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of top tracks of an artist from the Spotify catalog, for a specific country.\n   * See [Get an Artist's Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {string} countryId The id of the country (e.g. ES for Spain or US for United States)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistTopTracks = function (\n    artistId,\n    countryId,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/top-tracks',\n      params: { country: countryId }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of artists related with a given one from the Spotify catalog.\n   * See [Get an Artist's Related Artists](https://developer.spotify.com/web-api/get-related-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistRelatedArtists = function (\n    artistId,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/related-artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of Spotify featured playlists (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getFeaturedPlaylists = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/featured-playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of new album releases featured in Spotify (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getNewReleases = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/new-releases'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a List of Categories](https://developer.spotify.com/web-api/get-list-categories/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategories = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a single category used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a Category](https://developer.spotify.com/web-api/get-category/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategory = function (categoryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of Spotify playlists tagged with a particular category.\n   * See [Get a Category's Playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategoryPlaylists = function (\n    categoryId,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId + '/playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get Spotify catalog information about artists, albums, tracks or playlists that match a keyword string.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Array<string>} types An array of item types to search across.\n   * Valid types are: 'album', 'artist', 'playlist', and 'track'.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.search = function (query, types, options, callback) {\n    var requestData = {\n      url: _baseUri + '/search/',\n      params: {\n        q: query,\n        type: types.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches albums from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchAlbums = function (query, options, callback) {\n    return this.search(query, ['album'], options, callback);\n  };\n\n  /**\n   * Fetches artists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchArtists = function (query, options, callback) {\n    return this.search(query, ['artist'], options, callback);\n  };\n\n  /**\n   * Fetches tracks from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchTracks = function (query, options, callback) {\n    return this.search(query, ['track'], options, callback);\n  };\n\n  /**\n   * Fetches playlists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchPlaylists = function (query, options, callback) {\n    return this.search(query, ['playlist'], options, callback);\n  };\n\n  /**\n   * Fetches shows from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchShows = function (query, options, callback) {\n    return this.search(query, ['show'], options, callback);\n  };\n\n  /**\n   * Fetches episodes from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchEpisodes = function (query, options, callback) {\n    return this.search(query, ['episode'], options, callback);\n  };\n\n  /**\n   * Get audio features for a single track identified by its unique Spotify ID.\n   * See [Get Audio Features for a Track](https://developer.spotify.com/web-api/get-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioFeaturesForTrack = function (trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-features/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get audio features for multiple tracks based on their Spotify IDs.\n   * See [Get Audio Features for Several Tracks](https://developer.spotify.com/web-api/get-several-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioFeaturesForTracks = function (trackIds, callback) {\n    var requestData = {\n      url: _baseUri + '/audio-features',\n      params: { ids: trackIds }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get audio analysis for a single track identified by its unique Spotify ID.\n   * See [Get Audio Analysis for a Track](https://developer.spotify.com/web-api/get-audio-analysis/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioAnalysisForTrack = function (trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-analysis/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Create a playlist-style listening experience based on seed artists, tracks and genres.\n   * See [Get Recommendations Based on Seeds](https://developer.spotify.com/web-api/get-recommendations/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getRecommendations = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Retrieve a list of available genres seed parameter values for recommendations.\n   * See [Available Genre Seeds](https://developer.spotify.com/web-api/get-recommendations/#available-genre-seeds) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAvailableGenreSeeds = function (callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations/available-genre-seeds'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get information about a user’s available devices.\n   * See [Get a User’s Available Devices](https://developer.spotify.com/web-api/get-a-users-available-devices/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyDevices = function (callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/devices'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get information about the user’s current playback state, including track, track progress, and active device.\n   * See [Get Information About The User’s Current Playback](https://developer.spotify.com/web-api/get-information-about-the-users-current-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyCurrentPlaybackState = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the object currently being played on the user’s Spotify account.\n   * See [Get the User’s Currently Playing Track](https://developer.spotify.com/web-api/get-the-users-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyCurrentPlayingTrack = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/currently-playing'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Transfer playback to a new device and determine if it should start playing.\n   * See [Transfer a User’s Playback](https://developer.spotify.com/web-api/transfer-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} deviceIds A JSON array containing the ID of the device on which playback should be started/transferred.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.transferMyPlayback = function (\n    deviceIds,\n    options,\n    callback\n  ) {\n    var postData = options || {};\n    postData.device_ids = deviceIds;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player',\n      postData: postData\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Play a track on the user's active device\n   * See [Start/Resume a User's Playback](https://developer.spotify.com/documentation/web-api/reference/player/start-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.play = function (options, callback) {\n    options = options || {};\n    var params =\n      'device_id' in options ? { device_id: options.device_id } : null;\n    var postData = {};\n    ['context_uri', 'uris', 'offset', 'position_ms'].forEach(function (field) {\n      if (field in options) {\n        postData[field] = options[field];\n      }\n    });\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/play',\n      params: params,\n      postData: postData\n    };\n\n    // need to clear options so it doesn't add all of them to the query params\n    var newOptions = typeof options === 'function' ? options : {};\n    return _checkParamsAndPerformRequest(requestData, newOptions, callback);\n  };\n\n  /**\n   * Add an item to the end of the user’s current playback queue.\n   * See [Add an Item to the User's Playback Queue](https://developer.spotify.com/documentation/web-api/reference/player/add-to-queue/) on\n   * the Spotify Developer site for more information about the endpoint.\n   * @param {string} uri The uri of the item to add to the queue. Must be a track or an episode uri.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.queue = function (uri, options, callback) {\n    options = options || {};\n    var params =\n      'device_id' in options\n        ? { uri: uri, device_id: options.device_id }\n        : { uri: uri };\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/queue',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Pause playback on the user’s account.\n   * See [Pause a User’s Playback](https://developer.spotify.com/web-api/pause-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.pause = function (options, callback) {\n    options = options || {};\n    var params =\n      'device_id' in options ? { device_id: options.device_id } : null;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/pause',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Skips to next track in the user’s queue.\n   * See [Skip User’s Playback To Next Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.skipToNext = function (options, callback) {\n    options = options || {};\n    var params =\n      'device_id' in options ? { device_id: options.device_id } : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/next',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Skips to previous track in the user’s queue.\n   * Note that this will ALWAYS skip to the previous track, regardless of the current track’s progress.\n   * Returning to the start of the current track should be performed using `.seek()`\n   * See [Skip User’s Playback To Previous Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.skipToPrevious = function (options, callback) {\n    options = options || {};\n    var params =\n      'device_id' in options ? { device_id: options.device_id } : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/previous',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Seeks to the given position in the user’s currently playing track.\n   * See [Seek To Position In Currently Playing Track](https://developer.spotify.com/web-api/seek-to-position-in-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} position_ms The position in milliseconds to seek to. Must be a positive number.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.seek = function (position_ms, options, callback) {\n    options = options || {};\n    var params = {\n      position_ms: position_ms\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/seek',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Set the repeat mode for the user’s playback. Options are repeat-track, repeat-context, and off.\n   * See [Set Repeat Mode On User’s Playback](https://developer.spotify.com/web-api/set-repeat-mode-on-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {String} state A string set to 'track', 'context' or 'off'.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setRepeat = function (state, options, callback) {\n    options = options || {};\n    var params = {\n      state: state\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/repeat',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Set the volume for the user’s current playback device.\n   * See [Set Volume For User’s Playback](https://developer.spotify.com/web-api/set-volume-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} volume_percent The volume to set. Must be a value from 0 to 100 inclusive.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setVolume = function (volume_percent, options, callback) {\n    options = options || {};\n    var params = {\n      volume_percent: volume_percent\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/volume',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Toggle shuffle on or off for user’s playback.\n   * See [Toggle Shuffle For User’s Playback](https://developer.spotify.com/web-api/toggle-shuffle-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {bool} state Whether or not to shuffle user's playback.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setShuffle = function (state, options, callback) {\n    options = options || {};\n    var params = {\n      state: state\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/shuffle',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a show from the Spotify catalog.\n   * See [Get a Show](https://developer.spotify.com/documentation/web-api/reference/shows/get-a-show/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} showId The id of the show. If you know the Spotify URI it is easy\n   * to find the show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getShow = function (showId, options, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/shows/' + showId;\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple shows from the Spotify catalog.\n   * See [Get Several Shows](https://developer.spotify.com/documentation/web-api/reference/shows/get-several-shows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getShows = function (showIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/shows/',\n      params: { ids: showIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches current user's saved shows.\n   * See [Get Current User's Saved Shows](https://developer.spotify.com/documentation/web-api/reference/library/get-users-saved-shows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedShows = function (options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/shows'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds a list of shows to the current user's saved shows.\n   * See [Save Shows for Current User](https://developer.spotify.com/documentation/web-api/reference/library/save-shows-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedShows = function (showIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/shows',\n      type: 'PUT',\n      postData: showIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove a list of shows from the current user's saved shows.\n   * See [Remove Shows for Current User](https://developer.spotify.com/documentation/web-api/reference/library/remove-shows-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedShows = function (\n    showIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/me/shows',\n      type: 'DELETE',\n      postData: showIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Checks if the current user's saved shows contains a certain list of shows.\n   * See [Check Current User's Saved Shows](https://developer.spotify.com/documentation/web-api/reference/library/check-users-saved-shows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} showIds The ids of the shows. If you know their Spotify URI it is easy\n   * to find their show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedShows = function (\n    showIds,\n    options,\n    callback\n  ) {\n    var requestData = {\n      url: _baseUri + '/me/shows/contains',\n      params: { ids: showIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the episodes of a show from the Spotify catalog.\n   * See [Get a Show's Episodes](https://developer.spotify.com/documentation/web-api/reference/shows/get-shows-episodes/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} showId The id of the show. If you know the Spotify URI it is easy\n   * to find the show id (e.g. spotify:show:<here_is_the_show_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getShowEpisodes = function (showId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/shows/' + showId + '/episodes'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches an episode from the Spotify catalog.\n   * See [Get an Episode](https://developer.spotify.com/documentation/web-api/reference/episodes/get-an-episode/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} episodeId The id of the episode. If you know the Spotify URI it is easy\n   * to find the episode id (e.g. spotify:episode:<here_is_the_episode_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getEpisode = function (episodeId, options, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/episodes/' + episodeId;\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple episodes from the Spotify catalog.\n   * See [Get Several Episodes](https://developer.spotify.com/documentation/web-api/reference/episodes/get-several-episodes/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} episodeIds The ids of the episodes. If you know their Spotify URI it is easy\n   * to find their episode id (e.g. spotify:episode:<here_is_the_episode_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getEpisodes = function (episodeIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/episodes/',\n      params: { ids: episodeIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Gets the access token in use.\n   *\n   * @return {string} accessToken The access token\n   */\n  Constr.prototype.getAccessToken = function () {\n    return _accessToken;\n  };\n\n  /**\n   * Sets the access token to be used.\n   * See [the Authorization Guide](https://developer.spotify.com/web-api/authorization-guide/) on\n   * the Spotify Developer site for more information about obtaining an access token.\n   *\n   * @param {string} accessToken The access token\n   * @return {void}\n   */\n  Constr.prototype.setAccessToken = function (accessToken) {\n    _accessToken = accessToken;\n  };\n\n  /**\n   * Sets an implementation of Promises/A+ to be used. E.g. Q, when.\n   * See [Conformant Implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md)\n   * for a list of some available options\n   *\n   * @param {Object} PromiseImplementation A Promises/A+ valid implementation\n   * @throws {Error} If the implementation being set doesn't conform with Promises/A+\n   * @return {void}\n   */\n  Constr.prototype.setPromiseImplementation = function (PromiseImplementation) {\n    var valid = false;\n    try {\n      var p = new PromiseImplementation(function (resolve) {\n        resolve();\n      });\n      if (typeof p.then === 'function' && typeof p.catch === 'function') {\n        valid = true;\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    if (valid) {\n      _promiseImplementation = PromiseImplementation;\n    } else {\n      throw new Error('Unsupported implementation of Promises/A+');\n    }\n  };\n\n  return Constr;\n})();\n\nif (typeof module === 'object' && typeof module.exports === 'object') {\n  module.exports = SpotifyWebApi;\n}\n","import { compileDeclareDirectiveFromMetadata } from '@angular/compiler';\nimport { Injectable } from '@angular/core';\nimport { NavController } from '@ionic/angular';\nimport { CommonService } from 'src/app/core/services/common.service';\nimport { environment } from 'src/environments/environment';\nimport { AuthInterface } from '../interfaces/auth.interface';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport { GlobalEnvironment } from 'src/app/shared/global.environment';\ndeclare var cordova: any;\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpotifyAuthService {\n  result = {};\n  userId: number;\n  spotifyApi: any;\n  constructor(private commonService: CommonService, private navCtrl: NavController) { \n    this.spotifyApi = new SpotifyWebApi();\n    this.spotifyApi.setAccessToken(GlobalEnvironment.auth?.accessToken);\n  }\n\n  setCordova() {\n  }\n\n  /**\n   * Connect with api of spotify.\n   */\n  auth() {\n    const config = {\n      clientId: environment.apis.spotify.clientId,\n      redirectUrl: environment.scheme + '://callback',\n      scopes: ['streaming', 'playlist-read-private', 'user-read-email', 'user-read-private'],\n      tokenExchangeUrl: environment.apis.spotify.urlResponse.tokenExchangeUrl,\n      tokenRefreshUrl: environment.apis.spotify.urlResponse.tokenRefreshUrl\n    };\n    cordova.plugins.spotifyAuth.forget();\n    cordova.plugins.spotifyAuth.authorize(config)\n      .then((auth: AuthInterface) => {\n        console.log(auth);\n        if(auth.accessToken) {\n          auth.loggedIn = true;\n          this.commonService.setAuth(auth);\n          this.spotifyApi.setAccessToken(auth.accessToken);\n          this.navCtrl.navigateForward('home');\n        }else {\n          /** Expired */\n      //    cordova.plugins.spotifyAuth.forget();\n      //    this.auth();\n        }\n      })\n      .catch(err => {\n        //cordova.plugins.spotifyAuth.forget();\n       // this.auth();\n      })\n  }\n\n  getUser() {\n    let data = this.spotifyApi.getUser().then((data: SpotifyApi.ListOfFeaturedPlaylistsResponse) => {\n      return data.playlists;\n    }, err => {\n      console.error(err);\n    });\n  \n    return data\n  }\n\n  async getPlayList() { \n    let data =  await this.spotifyApi.getFeaturedPlaylists()\n      .then((data: SpotifyApi.ListOfFeaturedPlaylistsResponse) => {\n        return data.playlists;\n      }, err => {\n        console.error(err);\n      });\n    \n      return data\n  }\n\n  follow(id: string) {\n    this.spotifyApi.followPlaylist(id)\n      .then(data => {\n        console.log(data);\n        //this.list = data.items;\n      }, err => {\n        console.error(err);\n      });\n  }\n\n  unfollow(id: string) {\n    this.spotifyApi.unfollowPlaylist(id)\n      .then(data => {\n        console.log(data);\n        //this.list = data.items;\n      }, err => {\n        console.error(err);\n      });\n    \n  }\n}\n"]}